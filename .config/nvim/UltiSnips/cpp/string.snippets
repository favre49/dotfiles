snippet zfunction
vector<int> z_function(string s) {
    int n = (int) s.length();
    vector<int> z(n);
    for (int i = 1, l = 0, r = 0; i < n; ++i) {
        if (i <= r)
            z[i] = min (r - i + 1, z[i - l]);
        while (i + z[i] < n && s[z[i]] == s[i + z[i]])
            ++z[i];
        if (i + z[i] - 1 > r)
            l = i, r = i + z[i] - 1;
    }
    return z;
}
endsnippet

snippet prefixfunc
// Finds longest prefix of [0..i] such that it is also a suffix of [0..i]
vector<int> prefix_func(string s)
{
  int n = (int)s.length();
  vector<int> pi(n);
  for (int i = 1; i < n; i++)
  {
    int j = pi[i-1];
    while (j > 0 && s[i] != s[j])
	    j = pi[j-1];
    if (s[i] == s[j])
	    j++;
    pi[i] = j;
  }
  return pi;
}

vector<int> kmp(const string& s, const string& pat) {
  vector<int> p = prefix_func(pat+'\0'+s), res;
  for (int i = (int)p.size() - (int)s.size(); i < p.size(); i++)
    if (p[i] == pat.size())
      res.push_back(i - 2*pat.size());
  return res;
}
endsnippet

snippet trie
// Untested
template<const int ALPHSIZE = 26>
struct Trie {
  struct Node {
    Node* c[ALPHSIZE] ;
    bool end;

    Node() : end(false){
      for (int i = 0; i < ALPHSIZE; i++) c[i] = NULL;
    }
  };

  Node* root;

  Trie() {
    root = new Node();
  }

  void insert(string s) {
    Node* curr = root;  
    for (int i = 0; i < s.length(); i++) {
      int alph = s[i]-'a';
      if (curr->c[alph]==NULL) curr->c[alph] = new Node();
      curr = curr->c[alph];
    }
    curr->end = true;
  }

  bool exists(string s) {
    Node* curr = root;
    for (int i = 0; i < s.length(); i++) {
      int alph = s[i]-'a';
      if (curr->c[alph]==NULL) return false;
      curr = curr->c[alph];
    }
    return curr->end;
  }
};
endsnippet

snippet bittrie
// Binary Trie
// Source: Me
// Tested on: Yosupo Set Xor-Min
template<int L = 24>
struct BinaryTrie {
  struct Node {
    int cnt,dep;
    int c[2];
    Node() {
      cnt = dep = 0;
      c[0] = c[1] = -1;
    }
  };
  int root = 0, sz =0;
  vector<Node> nodes{Node()};
  BinaryTrie(){}
  int create_node() {
    nodes.push_back(Node());
    return ++sz;
  }
  void insert(int x, int amt=1) {
    int v = root;
    for (int i = L; i >= 0; i--)  {
      nodes[v].cnt += amt;
      int b = (x>>i)&1;
      if (nodes[v].c[b] == -1) {
        nodes[v].c[b] = create_node();
        nodes[nodes[v].c[b]].dep = nodes[v].dep+1;
      }
      v = nodes[v].c[b];
    }
    nodes[v].cnt += amt;
  }
  // Assumes element exists
  void remove(int x, int amt = 1) {
    int v = root;
    for (int i = L; i >= 0; i--) {
      nodes[v].cnt -= amt;
      v = nodes[v].c[(x>>i)&1];
    }
    nodes[v].cnt -= amt;
  }
  int minxor(int x) {
    int ans = 0;
    int v = root;
    for (int i = L; i >= 0; i--) {
      int b = (x>>i)&1;
      if (nodes[v].c[b] != -1 && nodes[nodes[v].c[b]].cnt)
        v = nodes[v].c[b];
      else {
        ans |= 1<<i;
        v = nodes[v].c[b^1];
      }
    }
    return ans;
  }
};
endsnippet

snippet minrotation
// Find the lexicographically minimal rotation in O(n)
// rotate(v.begin(),v.begin()+val,v.end());
// type needs to implement a < compare
template<typename T>
int least_rotation(vector<T> v) {
  int n = v.size();
  for (int i = 0; i < n; i++)
    v.push_back(v[i]);
  int len = v.size(), i = 0, j = 1, k = 0;
  while(i+k < len && j+k < len) {
    if (v[i+k] == v[j+k]) k++;
    else if (v[j+k] < v[i+k]) i = i+k+1, k = 0;
    else j = j+k+1, k=0;
    if (i==j) j++;
  }
  return min(i,j);
}
endsnippet
