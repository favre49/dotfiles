snippet DSU
struct DSU {
  struct node {
    int p; // parent
    int s; // size
  };

  vector<node> nodes;
  DSU(int n) {
    nodes.resize(n);
    for (int i =0; i < n; i++) {
      nodes[i].p = i;
      nodes[i].s = 1;
    }
  }

  node& operator[](int index) {
    return nodes[index];
  }

  int size(int v) {
    return nodes[find(v)].s;
  }

  int find(int v) {
    if (nodes[v].p==v)
      return v;
    return nodes[v].p = find(nodes[v].p);
  }

  bool merge(int a, int b) {
    a = find(a);
    b = find(b);
    if (a==b)
      return false;
    if (nodes[a].s < nodes[b].s)
      swap(a,b);
    nodes[b].p = a;
    nodes[a].s += nodes[b].s;
    return true;
  }
};
endsnippet

snippet floyd
for (int k = 0; k < n; k++) {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
	    // Include if graph has negative edges
      //if (d[i][k] < INT_MAX && d[k][j] < INT_MAX)
	      d[i][j] = min(d[i][j],d[i][k]+d[k][j]);
	  }
  }
}
endsnippet

snippet bcc
// Find biconnected components
// vertex_sets store the vertices in each biconnected component. If a vertex
// is contained in more than one component, it is an articulation point
// components stores the edges in each BCC. If it is of size 1, that edge is
// a bridge.
struct BCC {
  int n, timer;
  vector<vector<pii>> adj;
  vector<pii> edges;
  vector<vector<int>> components, vertex_sets;
  vector<int> disc, st;

  BCC(int _n):n(_n), timer(0), adj(n), disc(n) {}
  void add_edge(int u, int v) {
    adj[u].push_back({v, (int)edges.size()});
    adj[v].push_back({u, (int)edges.size()});
    edges.push_back({u,v});
  }
  int dfs(int s, int p = -1) {
    int low = disc[s] = ++timer;
    for (auto [to,e] : adj[s]) {
      if (e != p)
      {
        if (!disc[to]) {
          st.push_back(e);
          int low_ = dfs(to,e);
          low = min(low,low_);
          if (disc[s] <= low_) {
            components.emplace_back();
            vector<int>& tmp = components.back();
            for (int y = -1; y != e;)
              tmp.push_back(y = st.back()), st.pop_back();
          }
        }
        else if (disc[to] < disc[s]) // back edge
        {
          low = min(low,disc[to]);
          st.push_back(e);
        }
      }
    }
    return low;
  }
  void build() {
    for (int i = 0; i < n; i++)
      if (!disc[i])
        dfs(i);
    vector<bool> in(n);
    for (auto& c : components) {
      vertex_sets.emplace_back();
      auto add = [&](int x) {
        if (!in[x])
          in[x] = 1, vertex_sets.back().push_back(x);
      };
      for (auto& e : c) add(edges[e].first), add(edges[e].second);
      for (auto& e : c) in[edges[e].first] = in[edges[e].second] = 0;
    }
  }
};
endsnippet

snippet scc
// Components is always in reverse topological order!
struct SCC {
  // Graph data
  int n;
  vector<vector<int>> adj;

  // Tarjan necessities
  vector<int> st;
  vector<bool> in_st;
  int st_sz = 0, tour;
  vector<int> tour_index, low_link;

  // Component information
  vector<vector<int>> components;
  vector<int> which_component;

  SCC(int _n):n(_n) {
    adj.resize(n);
  }
  SCC(vector<vector<int>>& _adj):n(_adj.size()), adj(_adj) {}

  void add_edge(int u, int v) { adj[u].push_back(v); }

  void tarjan(int v) {
    tour_index[v] = tour++;
    low_link[v] = tour_index[v];
    st[st_sz++] = v;
    in_st[v] = true;

    for (int u : adj[v]){
      if (tour_index[u] < 0) {
        tarjan(u);
        low_link[v] = min(low_link[v], low_link[u]);
      } else if (in_st[u]) {
        low_link[v] = min(low_link[v], tour_index[u]);
      }
    }

    if (low_link[v] == tour_index[v]) {
      components.emplace_back();
      vector<int>& component = components.back();
      int x;
      do {
        x = st[--st_sz];
        in_st[x] = false;
        which_component[x] = (int)components.size()-1;
        component.push_back(x);
      } while(x != v);
    }
  }

  void scc() {
    tour_index.assign(n,-1);
    low_link.assign(n,-1);
    which_component.assign(n,-1);

    st_sz = 0;
    st.resize(n);
    in_st.resize(n);
    tour = 0;

    for (int i = 0; i < n; i++){
      if (tour_index[i] < 0)
        tarjan(i);
    }
  }
};
endsnippet

snippet djikstra
struct Djikstra {
  int n;
  const ll INF = 1e16;
  vector<ll> d;
  vector<int> pred;
  vector<vector<pii>> adj;
  vector<vector<pii>> revadj;

  Djikstra(int _n):n(_n) {
    d.resize(n); pred.resize(n); adj.resize(n); revadj.resize(n);
  }
  void add_edge(int u, int v, int w) {
    adj[u].push_back({v,w}); revadj[v].push_back({u,w});
  }
  void djikstra(int s) {
    for (int i = 0; i< n; i++) pred[i] = -1, d[i] = INF; // reset
    d[s] = 0;
    priority_queue<pii,vector<pii>,greater<pii>> q;
    q.push({0,s});
    while(!q.empty()) {
      auto [d_v,v] = q.top();
      q.pop();
      if (d[v] != d_v) continue;
      for (auto [to,len] : adj[v]) {
        if (d[v]+len < d[to]) {
          d[to] = d[v]+len;
          pred[to] = v;
          q.push({d[to],to});
        }
      }
    }
  }
};
endsnippet

snippet centroids
vector<int> find_centroids(const vector<vector<int>>& adj) {
  int n = adj.size();
  vector<int> centroid;
  vector<int> sz(n);
  function<void(int,int)> dfs = [&](int u, int p) {
    sz[u] = 1;
    bool is_centroid = true;
    for (auto v : adj[u]) {
      if (v == p) continue;
      dfs(v,u);
      sz[u] += sz[v];
      if (sz[v] > n/2) is_centroid = false;
    }
    if (n - sz[u] > n/2) is_centroid = false;
    if (is_centroid) centroid.push_back(u);
  };
  dfs(0,-1);
  return centroid;
}
endsnippet

snippet rollbackdsu
struct RollbackDSU {
  struct node {
    int p;
    int s;
  };
  vector<node> nodes;
  vector<pair<int,node>> q;

  RollbackDSU(int n) {
    nodes.resize(n);
    for (int i = 0; i < n; i++) {
      nodes[i].p = i, nodes[i].s = 1;
    }
  }

  int find(int v) {
    return (nodes[v].p != v?find(nodes[v].p):v);
  }
  bool merge(int a, int b){
    int fe = a, se = b;
    a = find(a), b = find(b);
    q.push_back({a,nodes[a]});
    q.push_back({b,nodes[b]});
    if (a != b) {
      if (nodes[a].s < nodes[b].s) swap(a,b);
      nodes[b].p = a;
      nodes[a].s += nodes[b].s;
		return true;
    }
		return false;
  }

  void rollback(int k) {
    while(q.size() > k) {
      nodes[q.back().first] = q.back().second;
      q.pop_back();
    }
  }

  int time() {
    return q.size();
  }
};
endsnippet
