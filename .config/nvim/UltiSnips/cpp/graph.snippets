snippet DSU
struct DSU {
  struct node {
    int p; // parent
    int s; // size
  };
 
  vector<node> nodes;
  DSU(int n) {
    nodes.resize(n);
    for (int i =0; i < n; i++) {
      nodes[i].p = i;
      nodes[i].s = 1;
    }
  }
 
  node& operator[](int index) {
    return nodes[index];
  }
 
  int size(int v) {
    return nodes[find(v)].s;
  }
 
  int find(int v) {
    if (nodes[v].p==v) 
      return v;
    return nodes[v].p = find(nodes[v].p);
  }
 
  bool merge(int a, int b) {
    a = find(a);
    b = find(b);
    if (a==b)
      return false;
    if (nodes[a].s < nodes[b].s)
      swap(a,b);
    nodes[b].p = a;
    nodes[a].s += nodes[b].s;
    return true;
  }
};
endsnippet

snippet floyd
for (int k = 0; k < n; k++) {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
	    // Include if graph has negative edges
      //if (d[i][k] < INT_MAX && d[k][j] < INT_MAX)
	      d[i][j] = min(d[i][j],d[i][k]+d[k][j]);
	  }
  }
}
endsnippet

snippet scc
// Components is always in reverse topological order!
struct SCC {
  // Graph data
  int n;
  vector<vector<int>> adj;

  // Tarjan necessities
  vector<int> st;
  vector<bool> in_st;
  int st_sz = 0, tour;
  vector<int> tour_index, low_link;

  // Component information
  vector<vector<int>> components;
  vector<int> which_component;

  SCC(int _n):n(_n) {
    adj.resize(n);
  }
  SCC(vector<vector<int>>& _adj):n(_adj.size()), adj(_adj) {}

  void add_edge(int u, int v) { adj[u].push_back(v); }

  void tarjan(int v) {
    tour_index[v] = tour++;
    low_link[v] = tour_index[v];
    st[st_sz++] = v;
    in_st[v] = true;

    for (int u : adj[v]){
      if (tour_index[u] < 0) {
        tarjan(u);
        low_link[v] = min(low_link[v], low_link[u]);
      } else if (in_st[u]) {
        low_link[v] = min(low_link[v], tour_index[u]);
      }
    }

    if (low_link[v] == tour_index[v]) {
      components.emplace_back();
      vector<int>& component = components.back();
      int x;
      do {
        x = st[--st_sz];
        in_st[x] = false;
        which_component[x] = (int)components.size()-1;
        component.push_back(x);
      } while(x != v);
    }
  }

  void scc() {
    tour_index.assign(n,-1);
    low_link.assign(n,-1);
    which_component.assign(n,-1);

    st_sz = 0;
    st.resize(n);
    in_st.resize(n);
    tour = 0;

    for (int i = 0; i < n; i++){
      if (tour_index[i] < 0)
        tarjan(i);
    }
  }
};
endsnippet

snippet cutpoints
// Finds the articulation vertices in an undirected graph
// is_cut stores true if the vertex is an articulation vertex
struct CutPoints {
  vector<vector<int>> adj;
  vector<int> tin, low;
  vector<bool> visited, is_cut;
  int timer, _n;

  CutPoints(int n):_n(n) {
    adj.resize(n);
    visited.resize(n);
    is_cut.resize(n);
    tin.assign(n,-1);
    low.assign(n,-1);
    timer = 0;
  }
  void add_edge(int u, int v) {adj[u].push_back(v);adj[v].push_back(u);}
  void find_cut_points() {
    for (int i = 0; i < _n; i++)
      if (!visited[i])
        dfs(i);
  }
  void dfs(int v, int p = -1) {
    visited[v] = true;
    tin[v] = low[v] = timer++;
    int children = 0;
    for (int to : adj[v]) {
      if (to==p) continue;
      if (visited[to]) {
        low[v] = min(low[v],tin[to]);
      } else {
        dfs(to,v);
        low[v] = min(low[v],low[to]);
        if (low[to] >= tin[v] && p != -1) // is a cut point
          is_cut[v] = true;
        children++;
      }
    }
    if (p==-1 && children > 1) // is a cut point
      is_cut[v] = true;
  }
};
endsnippet

snippet bridges
struct edge {
  int u,v;
  bool bridge;
};

// Finds bridges in O(N+M)
struct Bridges {
  vector<vector<int>> adj;
  vector<edge> edges;
  vector<int> tin, low;
  vector<bool> visited;
  int timer, _n;
  Bridges(int n):_n(n) {
    adj.resize(n);
    visited.resize(n);
    tin.assign(n,-1);
    low.assign(n,-1);
    timer = 0;
  }
  void add_edge(int u, int v) {
    adj[u].push_back(edges.size());
    adj[v].push_back(edges.size());
    edges.push_back({u,v,0}); // Change constructor as necessary
  }
  void find_bridges(int v, int p = -1) {
    for (int i = 0; i < _n; i++) 
      if (!visited[i])
        dfs(i);
  }
  void dfs(int v, int p = -1) {
    visited[v] = true;
    tin[v] = low[v] = timer++;
    for (int e : adj[v]) 
    {
      int to = edges[e].u^edges[e].v^v;
      if (to==p) continue;
      if (visited[to]) {
        low[v] = min(low[v],tin[to]);
      } else {
        dfs(to,v);
        low[v] = min(low[v],low[to]);
        if (low[to] > tin[v]) // is a bridge
          edges[e].bridge = true;
      }
    }
  }
};
endsnippet

snippet djikstra
struct Djikstra {
  int n;
  const ll INF = 1e16;
  vector<ll> d;
  vector<int> pred;
  vector<vector<pii>> adj;
  vector<vector<pii>> revadj;
  
  Djikstra(int _n):n(_n) {
    d.resize(n); pred.resize(n); adj.resize(n); revadj.resize(n);
  }
  void add_edge(int u, int v, int w) {
    adj[u].push_back({v,w}); revadj[v].push_back({u,w});
  }
  void djikstra(int s) {
    for (int i = 0; i< n; i++) pred[i] = -1, d[i] = INF; // reset
    d[s] = 0;
    priority_queue<pii,vector<pii>,greater<pii>> q;
    q.push({0,s});
    while(!q.empty()) {
      auto [d_v,v] = q.top();
      q.pop();
      if (d[v] != d_v) continue;
      for (auto [to,len] : adj[v]) {
        if (d[v]+len < d[to]) {
          d[to] = d[v]+len;
          pred[to] = v;
          q.push({d[to],to});
        }        
      }
    }
  }
};
endsnippet
