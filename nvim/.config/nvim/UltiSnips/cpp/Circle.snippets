snippet circle

template <class T> int sgn(T x) { return (x > 0) - (x < 0); }

template<class T>
struct TPoint {
  typedef TPoint P;
  T x, y;
  static constexpr T eps = static_cast<T>(1e-9);
  explicit TPoint(T x=0, T y=0) : x(x), y(y) {}
  bool operator<(P p) const { return tie(x,y) < tie(p.x,p.y); }
  bool operator==(P p) const {
    // return tie(x,y)==tie(p.x,p.y);
    return abs(x-p.x) <= eps && abs(y-p.y) <= eps;
  }
  P operator+(P p) const { return P(x+p.x, y+p.y); }
  P operator-(P p) const { return P(x-p.x, y-p.y); }
  P operator*(T d) const { return P(x*d, y*d); }
  P operator/(T d) const { return P(x/d, y/d); }
  T dot(P p) const { return x*p.x + y*p.y; }
  T cross(P p) const { return x*p.y - y*p.x; }
  T cross(P a, P b) const { return (a-*this).cross(b-*this); }
  T dist2() const { return x*x + y*y; }
  double dist() const { return sqrt((double)dist2()); }

  // angle to x-axis in interval [-pi, pi]
  double angle() const { return atan2(y, x); }
  P unit() const { return *this/dist(); } // makes dist()=1
  P perp() const { return P(-y, x); } // rotates +90 degrees
  P normal() const { return perp().unit(); }

  // returns point rotated 'a' radians ccw around the origin
  P rotate(double a) const {
    return P(x*cos(a)-y*sin(a),x*sin(a)+y*cos(a)); }
};

using Point = TPoint<double>;


template<class T>
struct TCircle {
  typedef TCircle C;
  typedef TPoint<T> P;
  static constexpr T eps = static_cast<T>(1e-8);
  static constexpr T PI = 3.14159265358979323846;
  P c;
  T r;
  TCircle(T x, T y, T rad):c(x,y),r(rad) {}
  TCircle(P c, T rad):c(c),r(rad) {}
  T area() const { return PI*r*r; }
  T perimeter() const { return 2*PI*r; }
  T diameter() const { return 2*r; }
 
  // Returns true if there is an intersection
  bool intersect(C& other, pair<P,P>& out) {
    if (c == other.c) {
      assert(abs(r-other.r) > eps);
      return false;
    }
    P vec = other.c-c;
    T d2 = vec.dist2(), sum = r + other.r, dif = r - other.r,
      p = (d2+r*r - other.r*other.r)/(d2*2), h2 = r*r-p*p*d2;
    if (sum*sum < d2 || dif*dif > d2) return false;
    P mid = c + vec*p, per = vec.perp() * sqrt(fmax(0,h2)/d2);
    out = {mid+per, mid - per};
    return true;
  }
 
  // Returns a pair of two points on the circle whos tangents intersect at p
  // If p is inside the circle, NAN.
  // First point is the one to the right as seen from p towards the center
  pair<P,P> circleTangents(const P &p) {
    P a = p - c;
    T x = r*r/a.dist2(), y = sqrt(x-x*x);
    return make_pair(c+a*x+a.perp()*y,c+a*x-a.perp()*y);
  }
};
 
using Circle = TCircle<double>;
endsnippet