snippet zfunction
vector<int> z_function(string s) {
    int n = (int) s.length();
    vector<int> z(n);
    for (int i = 1, l = 0, r = 0; i < n; ++i) {
        if (i <= r)
            z[i] = min (r - i + 1, z[i - l]);
        while (i + z[i] < n && s[z[i]] == s[i + z[i]])
            ++z[i];
        if (i + z[i] - 1 > r)
            l = i, r = i + z[i] - 1;
    }
    return z;
}
endsnippet

snippet kmp
// Source: Me
// Tested on: CF 1575 H
namespace KMP {
  char MIN_CHAR = 'a';
  int ALPHABET = 26;

  // Finds longest prefix of [0..i] such that it is also a suffix of [0..i]
  vector<int> prefix_function(string s) {
    int n = (int)s.length();
    vector<int> pi(n);
    for (int i = 1; i < n; i++)
    {
      int j = pi[i-1];
      while (j > 0 && s[i] != s[j])
        j = pi[j-1];
      if (s[i] == s[j])
        j++;
      pi[i] = j;
    }
    return pi;
  }

  // KMP match finding algorithm
  vector<int> find_matches(const string& s, const string& pat) {
    vector<int> p = prefix_function(pat+'\0'+s), res;
    for (int i = (int)p.size() - (int)s.size(); i < p.size(); i++)
      if (p[i] == pat.size())
        res.push_back(i - 2*pat.size());
    return res;
  }

  // Builds KMP automaton aut
  // aut[p][c] = transition from pi when adding character c
  // TODO: Determine whether I should pass aut by reference or it's ok to return
  // Seems to incur tiny penalty, but unclear
  vector<vector<int>> build_automaton(string s) {
    s += '\0';
    int n = s.size();
    vector<int> pi = prefix_function(s);
    vector<vector<int>> aut(n, vector<int>(ALPHABET));
    for (int i = 0; i < n; i++) {
      for (int c = 0; c < ALPHABET; c++) {
        if (i > 0 && MIN_CHAR + c != s[i])
          aut[i][c] = aut[pi[i-1]][c];
        else
          aut[i][c] = i + (MIN_CHAR + c == s[i]);
      }
    }
    return aut;
  }
};
endsnippet

snippet trie
// Untested
template<const int ALPHSIZE = 26>
struct Trie {
  struct Node {
    Node* c[ALPHSIZE] ;
    bool end;

    Node() : end(false){
      for (int i = 0; i < ALPHSIZE; i++) c[i] = NULL;
    }
  };

  Node* root;

  Trie() {
    root = new Node();
  }

  void insert(string s) {
    Node* curr = root;  
    for (int i = 0; i < s.length(); i++) {
      int alph = s[i]-'a';
      if (curr->c[alph]==NULL) curr->c[alph] = new Node();
      curr = curr->c[alph];
    }
    curr->end = true;
  }

  bool exists(string s) {
    Node* curr = root;
    for (int i = 0; i < s.length(); i++) {
      int alph = s[i]-'a';
      if (curr->c[alph]==NULL) return false;
      curr = curr->c[alph];
    }
    return curr->end;
  }
};
endsnippet

snippet bittrie
// Binary Trie
// Source: Me
// Tested on: Yosupo Set Xor-Min
template<int L = 24>
struct BinaryTrie {
  struct Node {
    int cnt,dep;
    int c[2];
    Node() {
      cnt = dep = 0;
      c[0] = c[1] = -1;
    }
  };
  int root = 0, sz =0;
  vector<Node> nodes{Node()};
  BinaryTrie(){}
  int create_node() {
    nodes.push_back(Node());
    return ++sz;
  }
  void insert(int x, int amt=1) {
    int v = root;
    for (int i = L; i >= 0; i--)  {
      nodes[v].cnt += amt;
      int b = (x>>i)&1;
      if (nodes[v].c[b] == -1) {
        nodes[v].c[b] = create_node();
        nodes[nodes[v].c[b]].dep = nodes[v].dep+1;
      }
      v = nodes[v].c[b];
    }
    nodes[v].cnt += amt;
  }
  // Assumes element exists
  void remove(int x, int amt = 1) {
    int v = root;
    for (int i = L; i >= 0; i--) {
      nodes[v].cnt -= amt;
      v = nodes[v].c[(x>>i)&1];
    }
    nodes[v].cnt -= amt;
  }
  int minxor(int x) {
    int ans = 0;
    int v = root;
    for (int i = L; i >= 0; i--) {
      int b = (x>>i)&1;
      if (nodes[v].c[b] != -1 && nodes[nodes[v].c[b]].cnt)
        v = nodes[v].c[b];
      else {
        ans |= 1<<i;
        v = nodes[v].c[b^1];
      }
    }
    return ans;
  }
};
endsnippet

snippet minrotation
// Find the lexicographically minimal rotation in O(n)
// rotate(v.begin(),v.begin()+val,v.end());
// type needs to implement a < compare
template<typename T>
int least_rotation(vector<T> v) {
  int n = v.size();
  for (int i = 0; i < n; i++)
    v.push_back(v[i]);
  int len = v.size(), i = 0, j = 1, k = 0;
  while(i+k < len && j+k < len) {
    if (v[i+k] == v[j+k]) k++;
    else if (v[j+k] < v[i+k]) i = i+k+1, k = 0;
    else j = j+k+1, k=0;
    if (i==j) j++;
  }
  return min(i,j);
}
endsnippet

snippet run_length_encoding
template <typename T = char, typename U>
vector<pair<T,int>> run_length_encoding(const U& s) {
  int n = s.size();
  vector<pair<T, int>> res;
  if (n == 0) return res;
  T st = s.front();
  int cnt = 1;
  for (int i = 1; i < n; i++) {
    if (s[i] != st) {
      res.push_back({st, cnt});
      cnt = 0;
    }
    st = s[i];
    cnt++;
  }
  res.push_back({st,cnt});
  return res;
}
endsnippet

snippet rollinghash
// Source: tourist
// Tested on: ARC 81 D
// Fast string hashing using Mersenne prime 2^61-1
struct Hash {
  static const uint64_t md = (1LL << 61) - 1;
  static uint64_t step;
  static vector<uint64_t> pw;
 
  uint64_t addmod(uint64_t a, uint64_t b) const {
    a += b;
    if (a >= md) a -= md;
    return a;
  }
 
  uint64_t submod(uint64_t a, uint64_t b) const {
    a += md - b;
    if (a >= md) a -= md;
    return a;
  }
 
  uint64_t mulmod(uint64_t a, uint64_t b) const {
    uint64_t l1 = (uint32_t) a, h1 = a >> 32, l2 = (uint32_t) b, h2 = b >> 32;
    uint64_t l = l1 * l2, m = l1 * h2 + l2 * h1, h = h1 * h2;
    uint64_t ret = (l & md) + (l >> 61) + (h << 3) + (m >> 29) + (m << 35 >> 3) + 1;
    ret = (ret & md) + (ret >> 61);
    ret = (ret & md) + (ret >> 61);
    return ret - 1;
  }
 
  void ensure_pw(int sz) {
    int cur = (int) pw.size();
    if (cur < sz) {
      pw.resize(sz);
      for (int i = cur; i < sz; i++) {
        pw[i] = mulmod(pw[i - 1], step);
      }
    }
  }
 
  vector<uint64_t> pref;
  int n;

  template<typename T>
  Hash(const T& s) {
    n = (int) s.size();
    ensure_pw(n + 1);
    pref.resize(n + 1);
    pref[0] = 1;
    for (int i = 0; i < n; i++) {
      pref[i + 1] = addmod(mulmod(pref[i], step), s[i]);
    }
  }
 
  inline uint64_t operator()(const int from, const int to) const {
    assert(0 <= from && from <= to && to <= n - 1);
    return submod(pref[to + 1], mulmod(pref[from], pw[to - from + 1]));
  }
};
mt19937 rng((unsigned int) chrono::steady_clock::now().time_since_epoch().count());
uint64_t Hash::step = (md >> 2) + rng() % (md >> 1);
vector<uint64_t> Hash::pw = vector<uint64_t>(1, 1);
endsnippet
