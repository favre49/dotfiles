snippet DSU
struct DSU {
  struct node {
    int p; // parent
    int s; // size
  };

  vector<node> nodes;
  DSU(int n) {
    nodes.resize(n);
    for (int i =0; i < n; i++) {
      nodes[i].p = i;
      nodes[i].s = 1;
    }
  }

  node& operator[](int index) {
    return nodes[index];
  }

  int size(int v) {
    return nodes[find(v)].s;
  }

  int find(int v) {
    if (nodes[v].p==v)
      return v;
    return nodes[v].p = find(nodes[v].p);
  }

  bool merge(int a, int b) {
    a = find(a);
    b = find(b);
    if (a==b)
      return false;
    if (nodes[a].s < nodes[b].s)
      swap(a,b);
    nodes[b].p = a;
    nodes[a].s += nodes[b].s;
    return true;
  }
};
endsnippet

snippet floyd
for (int k = 0; k < n; k++) {
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
	    // Include if graph has negative edges
      //if (d[i][k] < INT_MAX && d[k][j] < INT_MAX)
	      d[i][j] = min(d[i][j],d[i][k]+d[k][j]);
	  }
  }
}
endsnippet

snippet bcc
// Source : bqi343
// Tested On: CF-102835-I
// Find biconnected components
// vertex_sets store the vertices in each biconnected component. If a vertex
// is contained in more than one component, it is an articulation point
// components stores the edges in each BCC. If it is of size 1, that edge is
// a bridge.
struct BCC {
  using pii = pair<int,int>;
  int n, timer;
  vector<vector<pii>> adj;
  vector<pii> edges;
  vector<vector<int>> components, vertex_sets;
  vector<int> disc, st;

  BCC(int _n):n(_n), timer(0), adj(n), disc(n) {}
  void add_edge(int u, int v) {
    adj[u].push_back({v, (int)edges.size()});
    adj[v].push_back({u, (int)edges.size()});
    edges.push_back({u,v});
  }
  int dfs(int s, int p = -1) {
    int low = disc[s] = ++timer;
    for (auto [to,e] : adj[s]) {
      if (e != p)
      {
        if (!disc[to]) {
          st.push_back(e);
          int low_ = dfs(to,e);
          low = min(low,low_);
          if (disc[s] <= low_) {
            components.emplace_back();
            vector<int>& tmp = components.back();
            for (int y = -1; y != e;)
              tmp.push_back(y = st.back()), st.pop_back();
          }
        }
        else if (disc[to] < disc[s]) // back edge
        {
          low = min(low,disc[to]);
          st.push_back(e);
        }
      }
    }
    return low;
  }
  void build() {
    for (int i = 0; i < n; i++)
      if (!disc[i])
        dfs(i);
    vector<bool> in(n);
    for (auto& c : components) {
      vertex_sets.emplace_back();
      auto add = [&](int x) {
        if (!in[x])
          in[x] = 1, vertex_sets.back().push_back(x);
      };
      for (auto& e : c) add(edges[e].first), add(edges[e].second);
      for (auto& e : c) in[edges[e].first] = in[edges[e].second] = 0;
    }
  }
};
endsnippet

snippet scc
// Source : neal
// Tested on : Yosupo Strongly Connected Components
// Components are always in reverse topological order
struct SCC {
  // Graph data
  int n;
  vector<vector<int>> adj;

  // Tarjan necessities
  vector<int> st;
  vector<bool> in_st;
  int st_sz = 0, tour;
  vector<int> tour_index, low_link;

  // Component information
  vector<vector<int>> components;
  vector<int> which_component;

  SCC(int _n):n(_n) {
    adj.resize(n);
  }
  SCC(vector<vector<int>>& _adj):n(_adj.size()), adj(_adj) {}

  void add_edge(int u, int v) { adj[u].push_back(v); }

  void tarjan(int v) {
    tour_index[v] = tour++;
    low_link[v] = tour_index[v];
    st[st_sz++] = v;
    in_st[v] = true;

    for (int u : adj[v]){
      if (tour_index[u] < 0) {
        tarjan(u);
        low_link[v] = min(low_link[v], low_link[u]);
      } else if (in_st[u]) {
        low_link[v] = min(low_link[v], tour_index[u]);
      }
    }

    if (low_link[v] == tour_index[v]) {
      components.emplace_back();
      vector<int>& component = components.back();
      int x;
      do {
        x = st[--st_sz];
        in_st[x] = false;
        which_component[x] = (int)components.size()-1;
        component.push_back(x);
      } while(x != v);
    }
  }

  void build() {
    tour_index.assign(n,-1);
    low_link.assign(n,-1);
    which_component.assign(n,-1);

    st_sz = 0;
    st.resize(n);
    in_st.resize(n);
    tour = 0;

    for (int i = 0; i < n; i++){
      if (tour_index[i] < 0)
        tarjan(i);
    }
  }
};
endsnippet

snippet djikstra
// Source : Me
// Tested on : Yosupo Shortest Path
// Use __gnu_pbds::priority_queue to get tiny speed increase
struct Dijkstra {
  using dist_type = pair<int64_t,int>;
  int n;
  const int64_t INF = 1e18;
  vector<int64_t> dist;
  vector<int> pred;
  vector<vector<pair<int,int64_t>>> adj;

  Dijkstra(int n):n(n), dist(n), pred(n), adj(n) {}

  void add_edge(int u, int v, int64_t w) {
    adj[u].push_back({v,w});
  }

  void build(int s) {
    for (int i = 0; i < n; i++) // reset
      pred[i] = -1, dist[i] = INF;
    dist[s] = 0;
    priority_queue<dist_type,vector<dist_type>,greater<dist_type>> q;
    q.push({0,s});
    while(!q.empty()) {
      auto [d_v, v] = q.top();
      q.pop();
      if (dist[v] != d_v) continue;
      for (auto& [to, len] : adj[v]) {
        if (dist[v] + len < dist[to]) {
          dist[to] = dist[v] + len;
          pred[to] = v;
          q.push({dist[to],to});
        }
      }
    }
  }

  vector<int> path(int goal) const {
    if (dist[goal] == INF) return {};
    vector<int> ans = {goal};
    while(pred[goal] != -1) {
      goal = pred[goal];
      ans.push_back(goal);
    }
    reverse(ans.begin(),ans.end());
    return ans;
  }
};
endsnippet

snippet centroids
vector<int> find_centroids(const vector<vector<int>>& adj) {
  int n = adj.size();
  vector<int> centroid;
  vector<int> sz(n);
  function<void(int,int)> dfs = [&](int u, int p) {
    sz[u] = 1;
    bool is_centroid = true;
    for (auto v : adj[u]) {
      if (v == p) continue;
      dfs(v,u);
      sz[u] += sz[v];
      if (sz[v] > n/2) is_centroid = false;
    }
    if (n - sz[u] > n/2) is_centroid = false;
    if (is_centroid) centroid.push_back(u);
  };
  dfs(0,-1);
  return centroid;
}
endsnippet

snippet rollbackdsu
struct RollbackDSU {
  struct node {
    int p;
    int s;
  };
  vector<node> nodes;
  vector<pair<int,node>> q;

  RollbackDSU(int n) {
    nodes.resize(n);
    for (int i = 0; i < n; i++) {
      nodes[i].p = i, nodes[i].s = 1;
    }
  }

  int find(int v) {
    return (nodes[v].p != v?find(nodes[v].p):v);
  }
  bool merge(int a, int b){
    int fe = a, se = b;
    a = find(a), b = find(b);
    q.push_back({a,nodes[a]});
    q.push_back({b,nodes[b]});
    if (a != b) {
      if (nodes[a].s < nodes[b].s) swap(a,b);
      nodes[b].p = a;
      nodes[a].s += nodes[b].s;
		return true;
    }
		return false;
  }

  void rollback(int k) {
    while(q.size() > k) {
      nodes[q.back().first] = q.back().second;
      q.pop_back();
    }
  }

  int time() {
    return q.size();
  }
};
endsnippet

snippet eulerwalk
// Source: bqi343
// Tested On: CF 1361 C
// Find Eulerian path starting at src in O(N+M).
// Returns vector of {vertex,label of edge to vertex}.
// Second element of first pair is -1.
// WARNINGS:
// 1. Check if graph is Eulerian before using this.
// 2. Ensure you've set it to directed if it's directed
struct EulerWalk {
  using pii = pair<int,int>;
  int n;
  vector<vector<pii>> g; // the graph
  vector<vector<pii>::iterator> its;
  vector<pii> edges; // Edges stored, indexed by label
  vector<bool> used;
  bool directed;

  EulerWalk(int _n, bool _directed = false):n(_n),g(_n),its(_n),directed(_directed) {}

  void add_edge(int u, int v) {
    int m = used.size();
    used.push_back(0);
    edges.push_back({u,v});
    g[u].push_back({v,m});
    if (!directed)
      g[v].push_back({u,m});
  }

  vector<pii> walk(int src = 0) {
    for (int i = 0; i < n; i++) its[i] = g[i].begin();
    vector<pair<pii,int>> ret, s = {{{src,-1},-1}};
    while(!s.empty()) {
      int x = s.back().first.first;
      auto& it = its[x], en = g[x].end();
      while(it != en && used[it->second]) it++;
      if (it == en) {
        if (!ret.empty() && ret.back().first.second != x)
          return {};
        ret.push_back(s.back());
        s.pop_back();
      }
      else {
        s.push_back({{it->first,x},it->second});
        used[it->second] = 1;
      }
    }
    if (ret.size() != used.size()+1) return {};
    vector<pii> ans;
    for (auto t : ret) ans.push_back({t.first.first,t.second});
    reverse(ans.begin(),ans.end());
    return ans;
  }
};
endsnippet

snippet centroid
// Source: Me
// Complexity: O(nlogn)
// Basic template for centroid decomposition.
struct Centroid {
  int n;
  vector<vector<int>> g;
  vector<bool> done;
  vector<int> sz, par, cen, lev;

  Centroid(int _n):n(_n),g(n),done(n),sz(n),par(n,-1),cen(n),lev(n) {
  }

  void add_edge(int u, int v) {
    g[u].push_back(v);
    g[v].push_back(u);
  }

  void dfs(int s) {
    sz[s] = 1;
    for (auto& u : g[s]) {
      if (u == par[s] || done[u]) continue;
      par[u] = s;
      dfs(u);
      sz[s] += sz[u];
    }
  }

  int get_centroid(int s) {
    par[s] = -1;
    dfs(s);
    int tot = sz[s];
    while(true) {
      pair<int,int> mx = {0,0};
      for (auto& u : g[s]) {
        if (u == par[s] || done[u]) continue;
        mx = max(mx,{sz[u],u});
      }
      if (2*mx.first <= tot) return s;
      s = mx.second;
    }
    assert(false);
    return -1;
  }

  void build(int s, int centroid = -1) {
    done[s = get_centroid(s)] = 1;
    cen[s] = centroid, lev[s] = (centroid==-1?0:lev[centroid]+1);
  
    // Build necessary data structures here

    for (auto& u : g[s]) {
      if (!done[u])
        build(u,s);
    }
  }
};
endsnippet
