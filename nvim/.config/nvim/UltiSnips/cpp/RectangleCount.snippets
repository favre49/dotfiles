snippet rectanglecount

// Source: ecnerwala
// Templates for Policy Based Data Structures
struct splitmix64_hash {
  static uint64_t splitmix64(uint64_t x) {
    // http://xorshift.di.unimi.it/splitmix64.c
    x += 0x9e3779b97f4a7c15;
    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
    x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
    return x ^ (x >> 31);
  }

  size_t operator()(uint64_t x) const {
    static const uint64_t FIXED_RANDOM = std::chrono::steady_clock::now().time_since_epoch().count();
    return splitmix64(x + FIXED_RANDOM);
  }
};

using namespace __gnu_pbds;
template <typename K, typename V, typename Hash = splitmix64_hash>
using hash_map = gp_hash_table<K, V, Hash>;

template <typename K, typename Hash = splitmix64_hash>
using hash_set = hash_map<K, null_type, Hash>;

template<class T, class Compare = less<>>
using ordered_set = tree<T,null_type,Compare,rb_tree_tag,tree_order_statistics_node_update>;



// Source: Me
// Tested on: CF 1093 E
// Count number of points in a rectangle with add/remove
// point queries online in O(log2n) with O(nlogn) memory
// Ordered set can be swapped out with treap
// x can range from [1,n] 
struct RectangleCount {
  int n;
  vector<ordered_set<pair<int,int>>> points;

  RectangleCount(int _n):n(_n), points(_n+1) {}

  void insert(int x, int y) {
    for (int i = x; i <= n; i += i&-i)
      points[i].insert({y,x});
  }

  void erase(int x, int y) {
    for (int i = x; i <= n; i += i&-i)
      points[i].erase({y,x});
  }

  int query(int x, int y) {
    int res = 0;
    for (; x > 0; x -= x&-x) res += points[x].order_of_key({y,1e9+7});
    return res;
  }

  // Find number of points in the rectangle [lx,rx] x [ly,ry]
  int query(int lx,int rx, int ly, int ry) {
    return query(rx,ry) - query(lx-1,ry) - query(rx,ly-1) + query(lx-1,ly-1);
  }
};


endsnippet