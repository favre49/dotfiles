snippet fenwick
// Source: Lain
// Tested on: https://judge.yosupo.jp/problem/point_add_range_sum
//
// Implementation of a Fenwick Tree.  can be used to make
// a order-statistics tree.
template <typename T>
struct Fenwick {
  public:
    Fenwick() = default;
    Fenwick(int n):n(n), tree(n+1,0) {}
    Fenwick(const vector<T>& build) : Fenwick(build.size()) {
      for (int i = 1; i <= n; i++) {
        tree[i] = build[i-1];
        for (int k = (i&-i)>>1; k > 0; k >>= 1)
          tree[i] += tree[i-k];
      }
    }

    void add(int pos, const T& change) {
      assert(pos < n);
      for (int i = pos+1; i <= n; i += (i&-i))
        tree[i] += change;
    }

    T query(int r) {
      assert(r < n);
      T ret = 0;
      for (int i = r+1; i > 0; i -= (i&-i))
        ret += tree[i];
      return ret;
    }

    T query(int l, int r) {
      return (l == 0)?query(r):query(r) - query(l-1);
    }

    // Returns the smallest p in [0,tn] such that query(p) > sum
    int find_last_prefix(T sum) {
      if (sum < 0) return -1;
      int prefix = 0;
      for (int k = 31 - __builtin_clz(n); k >= 0; k--) {
        if (prefix + (1<<k) <= n && tree[prefix + (1<<k)] <= sum) {
          prefix += 1<<k;
          sum -= tree[prefix];
        }
      }
      return prefix;
    }

  private:
    size_t n;
    vector<T> tree;
};
endsnippet

snippet rectcount
// Source: Me
// Tested on: CF 1093 E
// Count number of points in a rectangle with add/remove
// point queries online in O(log2n) with O(nlogn) memory
// Ordered set can be swapped out with treap
// x can range from [1,n] 
struct RectangleCount {
  int n;
  vector<ordered_set<pair<int,int>>> points;

  RectangleCount(int _n):n(_n), points(_n+1) {}

  void insert(int x, int y) {
    for (int i = x; i <= n; i += i&-i)
      points[i].insert({y,x});
  }

  void erase(int x, int y) {
    for (int i = x; i <= n; i += i&-i)
      points[i].erase({y,x});
  }

  int query(int x, int y) {
    int res = 0;
    for (; x > 0; x -= x&-x) res += points[x].order_of_key({y,1e9+7});
    return res;
  }

  // Find number of points in the rectangle [lx,rx] x [ly,ry]
  int query(int lx,int rx, int ly, int ry) {
    return query(rx,ry) - query(lx-1,ry) - query(rx,ly-1) + query(lx-1,ly-1);
  }
};
endsnippet
